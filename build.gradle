plugins {
    id "java"
    id "application"
    
    id "jacoco"
   	id "org.barfuin.gradle.jacocolog" version "3.1.0"
   	
   	id "pmd"
   	id "com.github.spotbugs" version "5.0.14"
   	
   	id "checkstyle"
    id "project-report"

    id "org.jbake.site" version "5.5.0"


   	
}

java {
    sourceCompatibility = JavaVersion.toVersion(11)
    targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
    mavenCentral()
}

dependencies {
    // Everything in src/main (production code). 
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'com.cedarsoftware:json-io:4.14.0'
    implementation 'org.codehaus.groovy:groovy-all:2.5.15'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'

    // Everything in src/test (test code). 
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    testImplementation 'org.testng:testng:7.4.0'  

    
}

jar {
	archiveBaseName = "WebsiteAnalysis"
	
	manifest {
		attributes(
			"Main-Class": "edu.odu.cs.cs350.WebsiteAnalysisDriver"
		)
	}
}

test {
    useJUnitPlatform()
    
    reports {
    	html.required = true
    }
    
    ignoreFailures = true; 
    
    testLogging {
    	events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    
    finalizedBy jacocoTestReport
}

//----------------------------------------------------------------------------
// Documentation Tool(s)
//----------------------------------------------------------------------------
javadoc {
	failOnError false
}

//----------------------------------------------------------------------------
// Analysis Tool(s)
//----------------------------------------------------------------------------
pmd {
	toolVersion = "6.21.0"
	ignoreFailures = true
}

pmdTest {
    enabled = false
}

spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

spotbugsTest {
    enabled = false
}

checkstyle {
    toolVersion "8.42"
    ignoreFailures = true
    showViolations = false
}

tasks.withType(Checkstyle) {
    reports {
        html.destination project.file("build/reports/checkstyle/main.html")
    }
}

checkstyleTest {
    enabled = false
}

//------------------------------------------------------------------------------
// Deploy Steps (Convenience Tasks)
//------------------------------------------------------------------------------
task reports(dependsOn: [
    "test",
    "jacocoTestReport",
    "checkstyleMain",
    "javadoc",
    "check",
    "spotbugsMain",
    "projectReport"])
{
    description "Generate all reports and documentation for this project."
}

task copyReports(type: Copy)
{
    dependsOn "reports"

    from "build/reports"
    into "build/tmp/website/assets"

    description "Copy all reports into \"website\" directory."
}

task copyDocumentation(type: Copy)
{
    dependsOn "reports"

    from "build/docs"
    into "build/tmp/website/assets"

    description "Copy Javadoc output into \"website\" directory."
}


//------------------------------------------------------------------------------
// JBake Configuration
//------------------------------------------------------------------------------
task copyJBakeTemplates(type: Copy)
{
    from "src/jbake"
    into "build/tmp/website"
}

task doAllTheCopying(dependsOn: [
    "copyReports",
    "copyDocumentation",
    "copyJBakeTemplates"])
{
    description "Copy everything into the JBake working directory."
}

task buildHomePage(dependsOn: copyJBakeTemplates)
{
    inputs.files ("build/tmp/website/content/home0.md", "./README.md")
    outputs.file ("build/tmp/website/content/home.md")

    doLast  {
        outputs.files.singleFile.withOutputStream { out ->
            for (file in inputs.files) file.withInputStream {
                out << it << '\n'
            }
        }
    }
}

jbake {
    srcDirName = "build/tmp/website"
}

task setUpWebsite()
{
    dependsOn "buildHomePage"
    dependsOn "doAllTheCopying"
}

bake {
    dependsOn "setUpWebsite"
}

//------------------------------------------------------------------------------
// Deploy/Update Project Website on GitHub Pages
//------------------------------------------------------------------------------
////////  Website publication on GitHub pages ///////////////////

def pagesDir = file("${project.rootDir}/../website-temp").absolutePath

task clearPages(type: Delete) {
    delete pagesDir
}

task workTree(dependsOn: ['clearPages']) { 
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'worktree', 'add', '-f', pagesDir, 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'checkout', 'gh-pages']
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'pull']
        }
    }
}

task copyReports (type: Copy, dependsOn: ['reports', 'workTree']) {
    from 'build/reports'
    into pagesDir
}


task copyWebsite (dependsOn: ['copyReports']) {
}

task commitWebsite (dependsOn: 'copyWebsite') {
    doLast {
        Date now = new Date()

        exec {
            workingDir = pagesDir
            commandLine = ['git', 'add', pagesDir]
            ignoreExitValue = true
        }
        exec {
            workingDir = pagesDir
            commandLine = ['git', 'commit', '-m', 'Updating webpages at ' + now.toString()]
            ignoreExitValue = true
        }
    }
}

task pushWebsite (type: Exec, dependsOn: 'commitWebsite') {
    workingDir = pagesDir
    commandLine = ['git', 'push']
    ignoreExitValue = true
}

task deployReports (type: Delete, dependsOn: 'pushWebsite') {
    group = "Reporting"
    description  'Commit and push website changes to GitHub'
    delete pagesDir
}